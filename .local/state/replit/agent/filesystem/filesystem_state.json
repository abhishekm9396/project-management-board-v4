{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Project Management Web Application\n\n## Overview\n\nThis is a modern project management web application built with React (Vite) frontend and Express.js backend, designed to provide a complete project management solution with Kanban boards, story management, and dashboard analytics. The application features a clean, modern UI built with shadcn/ui components and supports role-based access control for different user types (Admin, Team Lead, User).\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with Vite build system for fast development and optimized production builds\n- **UI Components**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Drag & Drop**: react-beautiful-dnd for Kanban board interactions\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Styling**: Tailwind CSS with CSS variables for theming support (light/dark mode)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js web framework\n- **Authentication**: Passport.js with local strategy using session-based authentication\n- **Password Security**: Built-in crypto module with scrypt for secure password hashing\n- **Session Management**: Express sessions with configurable storage backend\n- **API Design**: RESTful API with role-based authorization middleware\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Validation**: Zod schemas shared between frontend and backend for consistent validation\n\n### Data Storage Architecture\n- **Database**: PostgreSQL configured through Drizzle with connection pooling via Neon serverless driver\n- **Schema Design**: Normalized relational schema with tables for users, stories, comments, and audit logs\n- **Migrations**: Drizzle Kit for database schema migrations and version control\n- **Data Access**: Repository pattern with in-memory fallback storage for development\n\n### Authentication & Authorization\n- **Session-Based Auth**: Express sessions with secure cookie configuration\n- **Role-Based Access Control**: Three-tier permission system (Admin, Team Lead, User)\n- **Password Security**: Salted password hashing using Node.js crypto scrypt function\n- **Protected Routes**: Frontend route protection with authentication state management\n\n### Project Management Features\n- **Kanban Board**: Five-column workflow (To Do, In Progress, Blocked, Validation, Completed)\n- **Story Management**: Comprehensive story tracking with points, priorities, assignments, and due dates\n- **Comments System**: Flat comment structure with user mentions and real-time updates\n- **Dashboard Analytics**: Project metrics visualization with completion tracking and team insights\n- **AI Integration**: Placeholder API endpoints for future AI-powered effort estimation\n\n## External Dependencies\n\n### Core Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **@radix-ui/***: Headless UI component primitives for accessibility\n- **react-beautiful-dnd**: Drag and drop functionality for Kanban boards\n- **react-hook-form**: Form state management and validation\n- **@hookform/resolvers**: Integration between React Hook Form and Zod validation\n- **wouter**: Lightweight routing library\n- **date-fns**: Date manipulation and formatting utilities\n\n### Backend Infrastructure\n- **express**: Web application framework\n- **passport**: Authentication middleware with local strategy\n- **express-session**: Session management middleware\n- **bcryptjs**: Password hashing (backup option)\n- **connect-pg-simple**: PostgreSQL session store\n\n### Database & ORM\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect\n- **drizzle-kit**: Database migration and introspection tools\n- **@neondatabase/serverless**: Serverless PostgreSQL connection driver\n\n### Development & Build Tools\n- **vite**: Fast build tool and development server\n- **@vitejs/plugin-react**: React integration for Vite\n- **typescript**: Type safety and enhanced developer experience\n- **tailwindcss**: Utility-first CSS framework\n- **zod**: Runtime type validation and schema definition\n\n### UI & Styling\n- **tailwindcss**: Utility-first CSS framework with design system\n- **class-variance-authority**: Type-safe variant API for component styling\n- **clsx**: Conditional CSS class name utility\n- **lucide-react**: Icon library with React components","size_bytes":4584},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nasync function hashPassword(password: string) {\n  const saltRounds = 10;\n  return await bcrypt.hash(password, saltRounds);\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  return await bcrypt.compare(supplied, stored);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      console.log(`[AUTH] Login attempt for username: ${username}`);\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        console.log(`[AUTH] User not found: ${username}`);\n        return done(null, false);\n      }\n      console.log(`[AUTH] User found: ${user.username}, checking password...`);\n      const passwordMatch = await comparePasswords(password, user.password);\n      console.log(`[AUTH] Password match result: ${passwordMatch}`);\n      if (!passwordMatch) {\n        console.log(`[AUTH] Password verification failed for: ${username}`);\n        return done(null, false);\n      } else {\n        console.log(`[AUTH] Login successful for: ${username}`);\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":2859},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertStorySchema, insertCommentSchema, type StoryWithAssignee } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated() || !req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\nfunction requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    next();\n  };\n}\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Story routes\n  app.get(\"/api/stories\", requireAuth, async (req, res) => {\n    try {\n      const stories = await storage.getAllStories();\n      res.json(stories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stories\" });\n    }\n  });\n\n  app.get(\"/api/stories/status/:status\", requireAuth, async (req, res) => {\n    try {\n      const { status } = req.params;\n      const stories = await storage.getStoriesByStatus(status);\n      res.json(stories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stories by status\" });\n    }\n  });\n\n  app.get(\"/api/stories/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const story = await storage.getStory(id);\n      if (!story) {\n        return res.status(404).json({ message: \"Story not found\" });\n      }\n      res.json(story);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch story\" });\n    }\n  });\n\n  app.post(\"/api/stories\", requireAuth, async (req, res) => {\n    try {\n      const storyData = insertStorySchema.parse({\n        ...req.body,\n        createdBy: req.user!.id,\n        updatedBy: req.user!.id,\n      });\n      const story = await storage.createStory(storyData);\n      res.status(201).json(story);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid story data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create story\" });\n    }\n  });\n\n  app.patch(\"/api/stories/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = { ...req.body, updatedBy: req.user!.id };\n      const story = await storage.updateStory(id, updateData);\n      if (!story) {\n        return res.status(404).json({ message: \"Story not found\" });\n      }\n      res.json(story);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update story\" });\n    }\n  });\n\n  app.delete(\"/api/stories/:id\", requireRole([\"Admin\", \"Team Lead\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteStory(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Story not found\" });\n      }\n      res.json({ message: \"Story deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete story\" });\n    }\n  });\n\n  // Comment routes\n  app.get(\"/api/stories/:storyId/comments\", requireAuth, async (req, res) => {\n    try {\n      const { storyId } = req.params;\n      const comments = await storage.getCommentsByStoryId(storyId);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/stories/:storyId/comments\", requireAuth, async (req, res) => {\n    try {\n      const { storyId } = req.params;\n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        storyId,\n        userId: req.user!.id,\n      });\n      const comment = await storage.createComment(commentData);\n      res.status(201).json(comment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid comment data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  app.delete(\"/api/comments/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteComment(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Comment not found\" });\n      }\n      res.json({ message: \"Comment deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete comment\" });\n    }\n  });\n\n  // User management routes (Admin only)\n  app.get(\"/api/users\", requireRole([\"Admin\"]), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const safeUsers = users.map(user => {\n        const { password, ...safeUser } = user;\n        return safeUser;\n      });\n      res.json(safeUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Dashboard metrics\n  app.get(\"/api/dashboard/metrics\", requireAuth, async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // AI Estimation placeholder\n  app.post(\"/api/stories/ai-estimate\", requireAuth, async (req, res) => {\n    try {\n      const { title, description } = req.body;\n      \n      // Simple AI estimation logic based on content\n      let estimatedPointer = 1;\n      const contentLength = (title + description).length;\n      \n      if (contentLength > 200) {\n        estimatedPointer = 13;\n      } else if (contentLength > 100) {\n        estimatedPointer = 8;\n      } else if (contentLength > 50) {\n        estimatedPointer = 5;\n      } else {\n        estimatedPointer = 3;\n      }\n\n      // Priority suggestion logic\n      let prioritySuggestion = \"Medium\";\n      const titleLower = title.toLowerCase();\n      const descLower = description.toLowerCase();\n      \n      if (titleLower.includes(\"critical\") || titleLower.includes(\"urgent\") || \n          descLower.includes(\"bug\") || descLower.includes(\"security\")) {\n        prioritySuggestion = \"High\";\n      } else if (titleLower.includes(\"nice\") || titleLower.includes(\"enhancement\") ||\n                 descLower.includes(\"improvement\")) {\n        prioritySuggestion = \"Low\";\n      }\n\n      res.json({\n        estimatedPointer,\n        prioritySuggestion,\n        confidence: 0.75, // Mock confidence score\n        reasoning: `Based on content analysis: ${contentLength} characters suggest ${estimatedPointer} story points. Keywords indicate ${prioritySuggestion} priority.`,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"AI estimation service unavailable\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7100},"server/storage.ts":{"content":"import { type User, type InsertUser, type Story, type InsertStory, type Comment, type InsertComment, type StoryWithAssignee, type CommentWithUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\nimport bcrypt from \"bcryptjs\";\n\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n\n  // Story operations\n  getStory(id: string): Promise<StoryWithAssignee | undefined>;\n  getStoriesByStatus(status: string): Promise<StoryWithAssignee[]>;\n  getAllStories(): Promise<StoryWithAssignee[]>;\n  createStory(story: InsertStory): Promise<Story>;\n  updateStory(id: string, updates: Partial<Story>): Promise<Story | undefined>;\n  deleteStory(id: string): Promise<boolean>;\n\n  // Comment operations\n  getCommentsByStoryId(storyId: string): Promise<CommentWithUser[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  deleteComment(id: string): Promise<boolean>;\n\n  // Dashboard metrics\n  getDashboardMetrics(): Promise<{\n    totalStories: number;\n    completed: number;\n    totalPoints: number;\n    teamMembers: number;\n    storiesByStatus: Record<string, number>;\n    storiesByPriority: Record<string, number>;\n  }>;\n\n  sessionStore: any;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private stories: Map<string, Story>;\n  private comments: Map<string, Comment>;\n  public sessionStore: any;\n\n  constructor() {\n    this.users = new Map();\n    this.stories = new Map();\n    this.comments = new Map();\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000,\n    });\n\n    // Initialize with seed data\n    this.initializeSeedData();\n  }\n\n  private async initializeSeedData() {\n    // Create sample users\n    const adminUser = {\n      id: randomUUID(),\n      username: \"admin\",\n      email: \"admin@project.com\",\n      password: \"$2b$10$vje0iEeqeBEfFpWOz21RLu4EMG9jQ28Bq7q/puUP18NqodIdlbRs2\", // password: admin123\n      name: \"Admin User\",\n      role: \"Admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const shantnu = {\n      id: randomUUID(),\n      username: \"shantnu\",\n      email: \"shantnu@project.com\",\n      password: \"$2b$10$vje0iEeqeBEfFpWOz21RLu4EMG9jQ28Bq7q/puUP18NqodIdlbRs2\", // password: admin123\n      name: \"Shantnu\",\n      role: \"Team Lead\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const pranav = {\n      id: randomUUID(),\n      username: \"pranav\",\n      email: \"pranav@project.com\",\n      password: \"$2b$10$vje0iEeqeBEfFpWOz21RLu4EMG9jQ28Bq7q/puUP18NqodIdlbRs2\", // password: admin123\n      name: \"Pranav\",\n      role: \"Team Lead\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const abhishek = {\n      id: randomUUID(),\n      username: \"abhishek\",\n      email: \"abhishek@project.com\",\n      password: \"$2b$10$vje0iEeqeBEfFpWOz21RLu4EMG9jQ28Bq7q/puUP18NqodIdlbRs2\", // password: admin123\n      name: \"Abhishek\",\n      role: \"User\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const tanay = {\n      id: randomUUID(),\n      username: \"tanay\",\n      email: \"tanay@project.com\",\n      password: \"$2b$10$vje0iEeqeBEfFpWOz21RLu4EMG9jQ28Bq7q/puUP18NqodIdlbRs2\", // password: admin123\n      name: \"Tanay\",\n      role: \"User\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(adminUser.id, adminUser);\n    this.users.set(shantnu.id, shantnu);\n    this.users.set(pranav.id, pranav);\n    this.users.set(abhishek.id, abhishek);\n    this.users.set(tanay.id, tanay);\n\n    // Create sample stories\n    const stories = [\n      {\n        id: randomUUID(),\n        storyNumber: \"T&D-1001\",\n        title: \"Setup Authentication System\",\n        description: \"Implement JWT-based authentication with role-based access control\",\n        pointer: 8,\n        acceptanceCriteria: \"- User can login with email/password\\n- JWT tokens are generated\\n- Role-based access is enforced\",\n        status: \"To Do\",\n        priority: \"High\",\n        storyType: \"Story\",\n        project: \"T&D\",\n        teamLead: \"Shantnu\",\n        epicLink: null,\n        activeSprint: \"sprint-1\",\n        sprintId: \"sprint-1\",\n        tags: [\"auth\", \"security\"],\n        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        assigneeId: adminUser.id,\n        createdBy: adminUser.id,\n        updatedBy: adminUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        storyNumber: \"T&D-1002\",\n        title: \"Design Database Schema\",\n        description: \"Create SQLAlchemy models for all entities\",\n        pointer: 5,\n        acceptanceCriteria: \"- All models defined\\n- Relationships established\\n- Migrations created\",\n        status: \"To Do\",\n        priority: \"Medium\",\n        storyType: \"Story\",\n        project: \"T&D\",\n        teamLead: \"Shantnu\",\n        epicLink: null,\n        activeSprint: \"sprint-1\",\n        sprintId: \"sprint-1\",\n        tags: [\"database\", \"schema\"],\n        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n        assigneeId: tanay.id,\n        createdBy: shantnu.id,\n        updatedBy: shantnu.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        storyNumber: \"T&D-1003\",\n        title: \"Implement Kanban Board\",\n        description: \"Create drag-and-drop interface with react-beautiful-dnd\",\n        pointer: 13,\n        acceptanceCriteria: \"- Drag and drop functionality\\n- Column management\\n- Real-time updates\",\n        status: \"In Progress\",\n        priority: \"High\",\n        storyType: \"Story\",\n        project: \"T&D\",\n        teamLead: \"Shantnu\",\n        epicLink: null,\n        activeSprint: \"sprint-1\",\n        sprintId: \"sprint-1\",\n        tags: [\"frontend\", \"kanban\"],\n        dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),\n        assigneeId: shantnu.id,\n        createdBy: pranav.id,\n        updatedBy: pranav.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        storyNumber: \"ADMS-1001\",\n        title: \"User Dashboard\",\n        description: \"Create responsive dashboard with metrics\",\n        pointer: 8,\n        acceptanceCriteria: \"- Metrics display\\n- Charts integration\\n- Responsive design\",\n        status: \"Validation\",\n        priority: \"Medium\",\n        storyType: \"Story\",\n        project: \"ADMS\",\n        teamLead: \"Pranav\",\n        epicLink: null,\n        activeSprint: \"sprint-1\",\n        sprintId: \"sprint-1\",\n        tags: [\"frontend\", \"dashboard\"],\n        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n        assigneeId: pranav.id,\n        createdBy: adminUser.id,\n        updatedBy: adminUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        storyNumber: \"T&D-1004\",\n        title: \"Project Setup\",\n        description: \"Initialize React and Express projects\",\n        pointer: 3,\n        acceptanceCriteria: \"- Projects initialized\\n- Dependencies installed\\n- Basic structure created\",\n        status: \"Completed\",\n        priority: \"Low\",\n        storyType: \"Story\",\n        project: \"T&D\",\n        teamLead: \"Shantnu\",\n        epicLink: null,\n        activeSprint: \"sprint-1\",\n        sprintId: \"sprint-1\",\n        tags: [\"setup\", \"initial\"],\n        dueDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n        assigneeId: adminUser.id,\n        createdBy: adminUser.id,\n        updatedBy: adminUser.id,\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(),\n      },\n    ];\n\n    stories.forEach(story => {\n      this.stories.set(story.id, story);\n    });\n\n    // Create sample comments\n    const sampleComments = [\n      {\n        id: randomUUID(),\n        storyId: stories[0].id,\n        userId: shantnu.id,\n        commentText: \"We should consider using @admin for the password hashing implementation. What do you think about bcrypt vs argon2?\",\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      },\n      {\n        id: randomUUID(),\n        storyId: stories[0].id,\n        userId: adminUser.id,\n        commentText: \"@shantnu Good point! I think bcrypt should be sufficient for our use case. It's well-tested and Express has good support for it.\",\n        createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000),\n      },\n    ];\n\n    sampleComments.forEach(comment => {\n      this.comments.set(comment.id, comment);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      role: insertUser.role || \"User\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getStory(id: string): Promise<StoryWithAssignee | undefined> {\n    const story = this.stories.get(id);\n    if (!story) return undefined;\n\n    const assignee = story.assigneeId ? await this.getUser(story.assigneeId) : undefined;\n    const createdByUser = await this.getUser(story.createdBy);\n    const commentCount = Array.from(this.comments.values()).filter(c => c.storyId === id).length;\n\n    return {\n      ...story,\n      assignee,\n      createdByUser,\n      commentCount,\n    };\n  }\n\n  async getStoriesByStatus(status: string): Promise<StoryWithAssignee[]> {\n    const stories = Array.from(this.stories.values()).filter(s => s.status === status);\n    const result: StoryWithAssignee[] = [];\n\n    for (const story of stories) {\n      const assignee = story.assigneeId ? await this.getUser(story.assigneeId) : undefined;\n      const createdByUser = await this.getUser(story.createdBy);\n      const commentCount = Array.from(this.comments.values()).filter(c => c.storyId === story.id).length;\n\n      result.push({\n        ...story,\n        assignee,\n        createdByUser,\n        commentCount,\n      });\n    }\n\n    return result;\n  }\n\n  async getAllStories(): Promise<StoryWithAssignee[]> {\n    const stories = Array.from(this.stories.values());\n    const result: StoryWithAssignee[] = [];\n\n    for (const story of stories) {\n      const assignee = story.assigneeId ? await this.getUser(story.assigneeId) : undefined;\n      const createdByUser = await this.getUser(story.createdBy);\n      const commentCount = Array.from(this.comments.values()).filter(c => c.storyId === story.id).length;\n\n      result.push({\n        ...story,\n        assignee,\n        createdByUser,\n        commentCount,\n      });\n    }\n\n    return result;\n  }\n\n  async createStory(story: InsertStory): Promise<Story> {\n    const id = randomUUID();\n    \n    // Generate next story number based on project\n    const project = story.project || \"T&D\";\n    const existingNumbers = Array.from(this.stories.values())\n      .filter(s => s.project === project && s.storyNumber)\n      .map(s => parseInt(s.storyNumber!.split('-')[1]))\n      .filter(n => !isNaN(n));\n    \n    const nextNumber = existingNumbers.length > 0 ? Math.max(...existingNumbers) + 1 : 1001;\n    const storyNumber = `${project}-${nextNumber.toString().padStart(4, '0')}`;\n\n    const newStory: Story = {\n      ...story,\n      id,\n      storyNumber,\n      description: story.description || null,\n      pointer: story.pointer || 0,\n      acceptanceCriteria: story.acceptanceCriteria || null,\n      status: story.status || \"To Do\",\n      priority: story.priority || \"Medium\",\n      project: project,\n      teamLead: story.teamLead || (project === \"T&D\" ? \"Shantnu\" : project === \"ADMS\" ? \"Pranav\" : null),\n      sprintId: story.sprintId || null,\n      tags: story.tags || null,\n      dueDate: story.dueDate || null,\n      assigneeId: story.assigneeId || null,\n      updatedBy: story.updatedBy || story.createdBy,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.stories.set(id, newStory);\n    return newStory;\n  }\n\n  async updateStory(id: string, updates: Partial<Story>): Promise<Story | undefined> {\n    const story = this.stories.get(id);\n    if (!story) return undefined;\n\n    const updatedStory = { ...story, ...updates, updatedAt: new Date() };\n    this.stories.set(id, updatedStory);\n    return updatedStory;\n  }\n\n  async deleteStory(id: string): Promise<boolean> {\n    return this.stories.delete(id);\n  }\n\n  async getCommentsByStoryId(storyId: string): Promise<CommentWithUser[]> {\n    const comments = Array.from(this.comments.values()).filter(c => c.storyId === storyId);\n    const result: CommentWithUser[] = [];\n\n    for (const comment of comments) {\n      const user = await this.getUser(comment.userId);\n      if (user) {\n        result.push({ ...comment, user });\n      }\n    }\n\n    return result.sort((a, b) => (a.createdAt?.getTime() || 0) - (b.createdAt?.getTime() || 0));\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const id = randomUUID();\n    const newComment: Comment = {\n      ...comment,\n      id,\n      createdAt: new Date(),\n    };\n    this.comments.set(id, newComment);\n    return newComment;\n  }\n\n  async deleteComment(id: string): Promise<boolean> {\n    return this.comments.delete(id);\n  }\n\n  async getDashboardMetrics(): Promise<{\n    totalStories: number;\n    completed: number;\n    totalPoints: number;\n    teamMembers: number;\n    storiesByStatus: Record<string, number>;\n    storiesByPriority: Record<string, number>;\n  }> {\n    const stories = Array.from(this.stories.values());\n    const users = Array.from(this.users.values());\n\n    const storiesByStatus = stories.reduce((acc, story) => {\n      acc[story.status] = (acc[story.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const storiesByPriority = stories.reduce((acc, story) => {\n      acc[story.priority] = (acc[story.priority] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      totalStories: stories.length,\n      completed: storiesByStatus[\"Completed\"] || 0,\n      totalPoints: stories.reduce((sum, story) => sum + (story.pointer || 0), 0),\n      teamMembers: users.length,\n      storiesByStatus,\n      storiesByPriority,\n    };\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":15358},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull().default(\"User\"), // Admin, Team Lead, User\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const stories = pgTable(\"stories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storyNumber: text(\"story_number\").unique(), // PREFIX-#### format (e.g., T&D-1002)\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  pointer: integer(\"pointer\").default(1), // Story points (1-5)\n  acceptanceCriteria: text(\"acceptance_criteria\"),\n  status: text(\"status\").notNull().default(\"To Do\"), // To Do, In Progress, Blocked, Validation, Completed\n  priority: text(\"priority\").notNull().default(\"Medium\"), // Low, Medium, High\n  storyType: text(\"story_type\").notNull().default(\"Story\"), // Story, Bug, Epic\n  project: text(\"project\").notNull().default(\"T&D\"), // Project name (T&D, ADMS, etc.)\n  teamLead: text(\"team_lead\"), // Team lead name for this story\n  epicLink: text(\"epic_link\"),\n  activeSprint: text(\"active_sprint\").default(\"sprint-1\"),\n  sprintId: text(\"sprint_id\"),\n  tags: text(\"tags\").array(),\n  dueDate: timestamp(\"due_date\"),\n  assigneeId: varchar(\"assignee_id\").references(() => users.id),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storyId: varchar(\"story_id\").notNull().references(() => stories.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  commentText: text(\"comment_text\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tableName: text(\"table_name\").notNull(),\n  recordId: varchar(\"record_id\").notNull(),\n  action: text(\"action\").notNull(), // CREATE, UPDATE, DELETE\n  performedBy: varchar(\"performed_by\").notNull().references(() => users.id),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStorySchema = createInsertSchema(stories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertStory = z.infer<typeof insertStorySchema>;\nexport type Story = typeof stories.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n\n// Extended types for API responses\nexport type StoryWithAssignee = Story & {\n  assignee?: User;\n  createdByUser?: User;\n  commentCount?: number;\n};\n\nexport type CommentWithUser = Comment & {\n  user: User;\n};\n","size_bytes":3841},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport HomePage from \"@/pages/home-page\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1087},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 94.1%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Enhanced scrolling styles */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--muted-foreground)) transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background-color: hsl(var(--muted-foreground));\n    border-radius: 4px;\n    border: 2px solid transparent;\n    background-clip: content-box;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb:hover {\n    background-color: hsl(var(--foreground));\n  }\n\n  .scrollbar-track-transparent::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scrollbar-thumb-gray-300::-webkit-scrollbar-thumb {\n    background-color: rgb(209, 213, 219);\n  }\n\n  /* Dashboard specific styles */\n  .dashboard-container {\n    overflow-x: auto;\n    overflow-y: auto;\n    min-height: 100%;\n    scroll-behavior: smooth;\n  }\n\n  /* Responsive grid improvements */\n  .dashboard-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 1.5rem;\n  }\n\n  .chart-container {\n    position: relative;\n    height: 320px;\n    width: 100%;\n  }\n\n  /* Kanban board specific styles */\n  .kanban-column {\n    min-height: 500px;\n    overflow-y: auto;\n  }\n\n  .story-card {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .story-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px -8px rgba(0, 0, 0, 0.1);\n  }\n\n  /* Utility classes for text truncation */\n  .line-clamp-1 {\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  /* Responsive card scaling */\n  @media (max-width: 640px) {\n    .story-card {\n      transform: scale(0.9);\n      transform-origin: center;\n    }\n  }\n\n  @media (min-width: 1920px) {\n    .story-card.comfortable {\n      transform: scale(1.1);\n      transform-origin: center;\n    }\n  }\n\n  /* Zoom level responsive adjustments */\n  @media (resolution >= 120dpi) and (resolution < 144dpi) {\n    .story-card {\n      font-size: 0.9em;\n    }\n  }\n\n  @media (resolution >= 144dpi) {\n    .story-card {\n      font-size: 0.8em;\n    }\n  }\n\n  /* Zoom-based responsive scaling */\n  @media (max-width: 768px) {\n    .dashboard-container {\n      padding: 1rem;\n    }\n    \n    .dashboard-grid {\n      grid-template-columns: 1fr;\n    }\n  }\n\n  @media (min-width: 1920px) {\n    .dashboard-container {\n      max-width: none;\n    }\n    \n    .dashboard-grid {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n}\n\n/* Chart.js import */\nhtml {\n  scroll-behavior: smooth;\n  overflow-x: auto;\n}\n\n/* Smooth scrolling for all containers */\n* {\n  scroll-behavior: smooth;\n}\n","size_bytes":7170},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/active-sprint.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type StoryWithAssignee, type User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  MessageCircle, \n  Star, \n  Calendar,\n  User as UserIcon,\n  Clock,\n  ArrowUp,\n  ArrowDown,\n  Flag,\n  BookOpen,\n  Bug,\n  Zap\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ActiveSprintProps {\n  onStoryClick?: (storyId: string) => void;\n}\n\nconst PRIORITY_COLORS = {\n  High: \"hsl(0 84.2% 60.2%)\",\n  Medium: \"hsl(43 74% 66%)\",\n  Low: \"hsl(197 37% 24%)\",\n};\n\nconst PRIORITY_ICONS = {\n  High: ArrowUp,\n  Medium: Flag,\n  Low: ArrowDown,\n};\n\nconst STORY_TYPE_ICONS = {\n  Story: BookOpen,\n  Bug: Bug,\n  Epic: Zap,\n};\n\nexport function ActiveSprint({ onStoryClick }: ActiveSprintProps) {\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"all\");\n  const { user } = useAuth();\n\n  const { data: stories, isLoading: storiesLoading } = useQuery<StoryWithAssignee[]>({\n    queryKey: [\"/api/stories\"],\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  // Filter stories for active sprint\n  const activeSprintStories = stories?.filter(story => \n    story.sprintId === \"sprint-1\" && // Current active sprint\n    (selectedUserId === \"all\" || story.assigneeId === selectedUserId)\n  ) || [];\n\n  // Group stories by assignee\n  const storiesByUser = activeSprintStories.reduce((acc, story) => {\n    const userId = story.assigneeId || \"unassigned\";\n    if (!acc[userId]) {\n      acc[userId] = [];\n    }\n    acc[userId].push(story);\n    return acc;\n  }, {} as Record<string, StoryWithAssignee[]>);\n\n  if (storiesLoading || usersLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-10 w-64\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-48\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <Clock className=\"w-6 h-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold text-foreground\">Active Sprint</h2>\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            {activeSprintStories.length} stories\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <Label htmlFor=\"user-filter\" className=\"text-sm font-medium\">\n            Filter by User:\n          </Label>\n          <Select\n            value={selectedUserId}\n            onValueChange={setSelectedUserId}\n          >\n            <SelectTrigger className=\"w-64\" id=\"user-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Users</SelectItem>\n              {users?.map((user) => (\n                <SelectItem key={user.id} value={user.id}>\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar className=\"w-5 h-5\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                        {getUserInitials(user.name)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span>{user.name}</span>\n                  </div>\n                </SelectItem>\n              ))}\n              <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {activeSprintStories.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <Clock className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No Active Stories</h3>\n          <p className=\"text-muted-foreground\">\n            {selectedUserId === \"all\" \n              ? \"There are no stories in the active sprint yet.\"\n              : \"The selected user has no stories in the active sprint.\"\n            }\n          </p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {activeSprintStories.map((story) => {\n            const PriorityIcon = PRIORITY_ICONS[story.priority as keyof typeof PRIORITY_ICONS];\n            const TypeIcon = STORY_TYPE_ICONS.Story; // Default to Story since we don't have type field yet\n            \n            return (\n              <Card\n                key={story.id}\n                className=\"cursor-pointer hover:shadow-md transition-all duration-200 hover:bg-muted/30\"\n                onClick={() => onStoryClick?.(story.id)}\n                data-testid={`active-story-card-${story.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <TypeIcon className=\"w-4 h-4 text-blue-500\" />\n                      <CardTitle className=\"text-sm font-medium leading-tight\">\n                        {story.title}\n                      </CardTitle>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"text-xs px-2 py-1\"\n                        style={{\n                          backgroundColor: `${PRIORITY_COLORS[story.priority as keyof typeof PRIORITY_COLORS]}20`,\n                          color: PRIORITY_COLORS[story.priority as keyof typeof PRIORITY_COLORS],\n                        }}\n                      >\n                        <PriorityIcon className=\"w-3 h-3 mr-1\" />\n                        {story.priority}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {story.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"pt-0\">\n                  {story.description && (\n                    <p className=\"text-xs text-muted-foreground mb-3 line-clamp-2\">\n                      {story.description}\n                    </p>\n                  )}\n\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      {story.pointer && (\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-3 h-3 text-muted-foreground\" />\n                          <span className=\"text-xs text-muted-foreground\">{story.pointer} pts</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center space-x-1\">\n                        <MessageCircle className=\"w-3 h-3 text-muted-foreground\" />\n                        <span className=\"text-xs text-muted-foreground\">\n                          {story.commentCount || 0}\n                        </span>\n                      </div>\n                    </div>\n\n                    {story.dueDate && (\n                      <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                        <Calendar className=\"w-3 h-3\" />\n                        <span>\n                          {formatDistanceToNow(new Date(story.dueDate), { addSuffix: true })}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {story.assignee ? (\n                        <>\n                          <Avatar className=\"w-6 h-6\">\n                            <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                              {getUserInitials(story.assignee.name)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-xs text-foreground font-medium\">\n                            {story.assignee.name}\n                          </span>\n                        </>\n                      ) : (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-6 h-6 rounded-full bg-muted flex items-center justify-center\">\n                            <UserIcon className=\"w-3 h-3 text-muted-foreground\" />\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">Unassigned</span>\n                        </div>\n                      )}\n                    </div>\n\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      Sprint 1\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9980},"client/src/components/comments-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCommentSchema, type CommentWithUser, type StoryWithAssignee } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { X, Send, Trash2, Edit } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { z } from \"zod\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface CommentsSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  storyId: string | null;\n  onEditStory?: () => void;\n}\n\nconst commentFormSchema = insertCommentSchema.omit({\n  storyId: true,\n  userId: true,\n});\n\ntype CommentFormData = z.infer<typeof commentFormSchema>;\n\nexport function CommentsSidebar({ isOpen, onClose, storyId, onEditStory }: CommentsSidebarProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CommentFormData>({\n    resolver: zodResolver(commentFormSchema),\n    defaultValues: {\n      commentText: \"\",\n    },\n  });\n\n  const { data: story } = useQuery<StoryWithAssignee>({\n    queryKey: [\"/api/stories\", storyId],\n    enabled: !!storyId,\n  });\n\n  const { data: comments, isLoading } = useQuery<CommentWithUser[]>({\n    queryKey: [\"/api/stories\", storyId, \"comments\"],\n    enabled: !!storyId,\n  });\n\n  const createCommentMutation = useMutation({\n    mutationFn: async (data: CommentFormData) => {\n      if (!storyId) throw new Error(\"No story selected\");\n      const res = await apiRequest(\"POST\", `/api/stories/${storyId}/comments`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\", storyId, \"comments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\"] });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post comment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCommentMutation = useMutation({\n    mutationFn: async (commentId: string) => {\n      await apiRequest(\"DELETE\", `/api/comments/${commentId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\", storyId, \"comments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Comment deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete comment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const onSubmit = (data: CommentFormData) => {\n    createCommentMutation.mutate(data);\n  };\n\n  const handleDeleteComment = (commentId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this comment?\")) {\n      deleteCommentMutation.mutate(commentId);\n    }\n  };\n\n  const processCommentText = (text: string) => {\n    // Simple @mention highlighting\n    return text.replace(/@(\\w+)/g, '<span class=\"text-primary font-medium\">@$1</span>');\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed right-0 top-0 h-full w-80 bg-card border-l border-border z-50\",\n          \"transform transition-transform duration-300 ease-in-out\",\n          isOpen ? \"translate-x-0\" : \"translate-x-full\"\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Comments</h3>\n              <div className=\"flex items-center space-x-2\">\n                {onEditStory && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={onEditStory}\n                    data-testid=\"button-edit-story\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onClose}\n                  data-testid=\"button-close-sidebar\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n            {story && (\n              <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-story-title\">\n                {story.title}\n              </p>\n            )}\n          </div>\n\n          {/* Comments List */}\n          <div className=\"flex-1 overflow-y-auto p-6\">\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"flex space-x-3\">\n                    <Skeleton className=\"w-8 h-8 rounded-full\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <Skeleton className=\"h-4 w-24\" />\n                      <Skeleton className=\"h-12 w-full\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : comments && comments.length > 0 ? (\n              <div className=\"space-y-4\">\n                {comments.map((comment) => (\n                  <div\n                    key={comment.id}\n                    className=\"bg-muted/50 rounded-lg p-4\"\n                    data-testid={`comment-${comment.id}`}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                          {getUserInitials(comment.user.name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm font-medium text-foreground\">\n                              {comment.user.name}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {formatDistanceToNow(new Date(comment.createdAt || 0), { addSuffix: true })}\n                            </span>\n                          </div>\n                          {(user?.id === comment.userId || user?.role === \"Admin\") && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteComment(comment.id)}\n                              className=\"w-6 h-6 p-0 text-muted-foreground hover:text-destructive\"\n                              data-testid={`button-delete-comment-${comment.id}`}\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n                        </div>\n                        <div\n                          className=\"text-sm text-foreground\"\n                          dangerouslySetInnerHTML={{\n                            __html: processCommentText(comment.commentText),\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center text-muted-foreground py-8\">\n                <p>No comments yet</p>\n                <p className=\"text-xs mt-1\">Be the first to comment on this story</p>\n              </div>\n            )}\n          </div>\n\n          {/* Comment Input */}\n          <div className=\"p-6 border-t border-border\">\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex space-x-2\">\n              <Input\n                {...form.register(\"commentText\")}\n                placeholder=\"Add a comment... (use @username to mention)\"\n                className=\"flex-1\"\n                disabled={createCommentMutation.isPending}\n                data-testid=\"input-comment\"\n              />\n              <Button\n                type=\"submit\"\n                size=\"sm\"\n                disabled={createCommentMutation.isPending || !form.watch(\"commentText\")?.trim()}\n                data-testid=\"button-post-comment\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </form>\n            {form.formState.errors.commentText && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.commentText.message}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":9666},"client/src/components/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { KanbanBoard } from \"@/components/kanban-board\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  ClipboardList, \n  CheckCircle, \n  Star, \n  Users, \n  ArrowUp, \n  ArrowDown,\n  Expand,\n  TrendingUp,\n  MessageCircle,\n  Plus\n} from \"lucide-react\";\nimport { useEffect, useRef } from \"react\";\n\ninterface DashboardMetrics {\n  totalStories: number;\n  completed: number;\n  totalPoints: number;\n  teamMembers: number;\n  storiesByStatus: Record<string, number>;\n  storiesByPriority: Record<string, number>;\n}\n\nexport function Dashboard() {\n  const chartRefs = {\n    completion: useRef<HTMLCanvasElement>(null),\n    priority: useRef<HTMLCanvasElement>(null),\n  };\n\n  const { data: metrics, isLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  // Initialize charts when data is available\n  useEffect(() => {\n    if (!metrics || !(window as any).Chart) return;\n\n    // Completion Trend Chart\n    const completionCtx = chartRefs.completion.current;\n    if (completionCtx) {\n      const completionChart = new (window as any).Chart(completionCtx, {\n        type: 'line',\n        data: {\n          labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],\n          datasets: [{\n            label: 'Completed Stories',\n            data: [4, 7, 12, metrics.completed],\n            borderColor: 'hsl(173 58% 39%)',\n            backgroundColor: 'hsl(173 58% 39% / 0.1)',\n            tension: 0.4,\n            fill: true,\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              grid: {\n                color: 'hsl(214.3 31.8% 91.4%)',\n              },\n              ticks: {\n                color: 'hsl(215.4 16.3% 46.9%)',\n              }\n            },\n            x: {\n              grid: {\n                color: 'hsl(214.3 31.8% 91.4%)',\n              },\n              ticks: {\n                color: 'hsl(215.4 16.3% 46.9%)',\n              }\n            }\n          }\n        }\n      });\n\n      return () => completionChart.destroy();\n    }\n  }, [metrics]);\n\n  useEffect(() => {\n    if (!metrics || !(window as any).Chart) return;\n\n    // Priority Distribution Chart\n    const priorityCtx = chartRefs.priority.current;\n    if (priorityCtx) {\n      const priorityChart = new (window as any).Chart(priorityCtx, {\n        type: 'doughnut',\n        data: {\n          labels: ['High', 'Medium', 'Low'],\n          datasets: [{\n            data: [\n              metrics.storiesByPriority.High || 0,\n              metrics.storiesByPriority.Medium || 0,\n              metrics.storiesByPriority.Low || 0,\n            ],\n            backgroundColor: [\n              'hsl(0 84.2% 60.2%)',\n              'hsl(43 74% 66%)',\n              'hsl(197 37% 24%)'\n            ],\n            borderWidth: 2,\n            borderColor: 'hsl(0 0% 100%)',\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                color: 'hsl(215.4 16.3% 46.9%)',\n                padding: 20,\n              }\n            }\n          }\n        }\n      });\n\n      return () => priorityChart.destroy();\n    }\n  }, [metrics]);\n\n  const MetricCard = ({ \n    title, \n    value, \n    icon: Icon, \n    change, \n    changeType \n  }: { \n    title: string;\n    value: string | number;\n    icon: React.ElementType;\n    change: string;\n    changeType: 'up' | 'down';\n  }) => (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">{title}</p>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid={`metric-${title.toLowerCase().replace(' ', '-')}`}>\n              {value}\n            </p>\n          </div>\n          <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n            <Icon className=\"w-6 h-6 text-primary\" />\n          </div>\n        </div>\n        <div className=\"mt-4 flex items-center space-x-1\">\n          {changeType === 'up' ? (\n            <ArrowUp className=\"w-4 h-4 text-green-500\" />\n          ) : (\n            <ArrowDown className=\"w-4 h-4 text-red-500\" />\n          )}\n          <span className={`text-sm ${changeType === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n            {change}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-8 w-16 mb-4\" />\n                <Skeleton className=\"h-4 w-32\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Failed to load dashboard metrics</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 h-full overflow-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent\">\n      <div className=\"min-w-full p-6 space-y-8\">\n        {/* Dashboard Header */}\n        <div className=\"flex flex-col space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Project Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Track your team's progress and project metrics\n          </p>\n        </div>\n\n        {/* Key Metrics Summary */}\n        <Card className=\"bg-gradient-to-r from-primary/10 to-primary/5 border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-6 h-6 text-primary\" />\n              <span>Project Summary</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-primary\">{metrics?.totalStories || 0}</p>\n              <p className=\"text-sm text-muted-foreground\">Total Stories</p>\n              <p className=\"text-xs text-green-600\">+12% from last week</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-green-600\">{metrics?.completed || 0}</p>\n              <p className=\"text-sm text-muted-foreground\">Completed</p>\n              <p className=\"text-xs text-green-600\">+8% completion rate</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-orange-600\">{metrics?.totalPoints || 0}</p>\n              <p className=\"text-sm text-muted-foreground\">Story Points</p>\n              <p className=\"text-xs text-red-600\">-3% from target</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-blue-600\">{metrics?.teamMembers || 0}</p>\n              <p className=\"text-sm text-muted-foreground\">Team Members</p>\n              <p className=\"text-xs text-green-600\">+1 this month</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Metrics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 min-w-fit\">\n          <MetricCard\n            title=\"Total Stories\"\n            value={metrics.totalStories}\n            icon={ClipboardList}\n            change=\"+12% from last week\"\n            changeType=\"up\"\n          />\n          <MetricCard\n            title=\"Completed\"\n            value={metrics.completed}\n            icon={CheckCircle}\n            change=\"+8% from last week\"\n            changeType=\"up\"\n          />\n          <MetricCard\n            title=\"Total Points\"\n            value={metrics.totalPoints}\n            icon={Star}\n            change=\"-3% from last week\"\n            changeType=\"down\"\n          />\n          <MetricCard\n            title=\"Team Members\"\n            value={metrics.teamMembers}\n            icon={Users}\n            change=\"+1 this month\"\n            changeType=\"up\"\n          />\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 min-w-fit\">\n          <Card className=\"min-w-[400px]\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                <span>Story Completion Trend</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80 w-full\">\n                <canvas ref={chartRefs.completion} data-testid=\"chart-completion\"></canvas>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"min-w-[400px]\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Star className=\"w-5 h-5\" />\n                <span>Priority Distribution</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80 w-full\">\n                <canvas ref={chartRefs.priority} data-testid=\"chart-priority\"></canvas>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Status Distribution Chart */}\n        <Card className=\"w-full\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <ClipboardList className=\"w-5 h-5\" />\n              <span>Story Status Overview</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n              {Object.entries(metrics?.storiesByStatus || {}).map(([status, count]) => (\n                <div key={status} className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-foreground\">{count}</div>\n                  <div className=\"text-sm text-muted-foreground\">{status}</div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Kanban Board Section */}\n        <Card className=\"w-full\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                <span>Kanban Board Preview</span>\n              </CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Select defaultValue=\"all-sprints\">\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-sprints\">All Sprints</SelectItem>\n                    <SelectItem value=\"sprint-1\">Sprint 1</SelectItem>\n                    <SelectItem value=\"sprint-2\">Sprint 2</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"secondary\" size=\"sm\" data-testid=\"button-full-kanban\">\n                  <Expand className=\"w-4 h-4 mr-1\" />\n                  Full View\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"overflow-x-auto\">\n              <KanbanBoard compact />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card className=\"w-full\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"w-5 h-5\" />\n              <span>Recent Activity</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-1\">\n                <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <CheckCircle className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-foreground\">\n                    <span className=\"font-medium\">Admin User</span> completed story{\" \"}\n                    <span className=\"font-medium\">\"Project Setup\"</span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-2\">\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <MessageCircle className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-foreground\">\n                    <span className=\"font-medium\">Team Lead</span> commented on{\" \"}\n                    <span className=\"font-medium\">\"Setup Authentication System\"</span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">4 hours ago</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-3\">\n                <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Plus className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-foreground\">\n                    <span className=\"font-medium\">Regular User</span> created new story{\" \"}\n                    <span className=\"font-medium\">\"Implement AI Estimation\"</span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">1 day ago</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Load Chart.js */}\n        <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14883},"client/src/components/kanban-board.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  MessageCircle,\n  Plus,\n  Star,\n  Settings,\n  Paperclip,\n  Users,\n  ArrowUpDown,\n  List,\n  Grid3x3,\n  Activity,\n  Calendar,\n  Hash,\n  Filter,\n  SortAsc,\n  SortDesc,\n  Search\n} from \"lucide-react\";\nimport { StoryWithAssignee } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\n\ninterface KanbanBoardProps {\n  compact?: boolean;\n  onStoryClick?: (storyId: string) => void;\n  onCreateStory?: () => void;\n}\n\nconst COLUMN_NAMES = [\"To Do\", \"In Progress\", \"Blocked\", \"Validation\", \"Completed\"];\n\nconst COLUMN_COLORS = {\n  \"To Do\": \"hsl(12 76% 61%)\",\n  \"In Progress\": \"hsl(173 58% 39%)\",\n  \"Blocked\": \"hsl(0 84.2% 60.2%)\",\n  \"Validation\": \"hsl(43 74% 66%)\",\n  \"Completed\": \"hsl(142 76% 36%)\",\n};\n\nconst PRIORITY_COLORS = {\n  High: \"hsl(0 84.2% 60.2%)\",\n  Medium: \"hsl(43 74% 66%)\",\n  Low: \"hsl(142 76% 36%)\",\n};\n\nexport function KanbanBoard({ compact = false, onStoryClick, onCreateStory }: KanbanBoardProps) {\n  const [columns, setColumns] = useState<Record<string, StoryWithAssignee[]>>({});\n  const [selectedProject, setSelectedProject] = useState(\"all\");\n  const [selectedTeamLead, setSelectedTeamLead] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"kanban\" | \"list\">(\"kanban\");\n\n  // List view filters and sorting\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n  const [filters, setFilters] = useState({\n    story: \"\",\n    title: \"\",\n    assignee: \"\",\n    status: \"all\",\n    priority: \"all\",\n    points: \"\",\n    type: \"all\"\n  });\n  const [viewDensity, setViewDensity] = useState<\"compact\" | \"normal\" | \"comfortable\">(\"normal\");\n\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  const { data: stories, isLoading } = useQuery<StoryWithAssignee[]>({\n    queryKey: [\"/api/stories\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const updateStoryMutation = useMutation({\n    mutationFn: async ({ storyId, updates }: { storyId: string; updates: any }) => {\n      const res = await apiRequest(\"PATCH\", `/api/stories/${storyId}`, updates);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\"] });\n    },\n  });\n\n  const createStoryMutation = useMutation({\n    mutationFn: async (columnStatus: string) => {\n      if (!user?.id) {\n        throw new Error(\"User authentication required\");\n      }\n      \n      const newStory = {\n        title: \"New Story\",\n        description: \"Click to edit description\",\n        status: columnStatus,\n        priority: \"Medium\" as const,\n        storyType: \"Story\" as const,\n        pointer: 1,\n        project: selectedProject === \"all\" ? \"T&D\" : selectedProject,\n        acceptanceCriteria: \"• Add acceptance criteria here\",\n        createdBy: user.id,\n        teamLead: selectedTeamLead === \"all\" ? undefined : selectedTeamLead,\n      };\n      const res = await apiRequest(\"POST\", \"/api/stories\", newStory);\n      return await res.json();\n    },\n    onSuccess: (newStory) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\"] });\n      // Optionally, you can open the story for editing immediately\n      setTimeout(() => {\n        onStoryClick?.(newStory.id);\n      }, 500);\n    },\n    onError: (error: Error) => {\n      console.error(\"Failed to create story:\", error);\n    },\n  });\n\n  // Organize stories by status\n  useEffect(() => {\n    if (stories) {\n      const organized = COLUMN_NAMES.reduce((acc, status) => {\n        acc[status] = stories.filter(story => story.status === status);\n        return acc;\n      }, {} as Record<string, StoryWithAssignee[]>);\n      setColumns(organized);\n    }\n  }, [stories]);\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination, draggableId } = result;\n\n    if (!destination) return;\n    if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n\n    const startColumn = [...columns[source.droppableId]];\n    const endColumn = source.droppableId === destination.droppableId\n      ? startColumn\n      : [...columns[destination.droppableId]];\n\n    // Remove from source\n    const [removed] = startColumn.splice(source.index, 1);\n\n    // Add to destination\n    if (source.droppableId === destination.droppableId) {\n      startColumn.splice(destination.index, 0, removed);\n    } else {\n      endColumn.splice(destination.index, 0, removed);\n    }\n\n    // Update local state immediately for smooth UX\n    const newColumns = {\n      ...columns,\n      [source.droppableId]: startColumn,\n      [destination.droppableId]: endColumn,\n    };\n    setColumns(newColumns);\n\n    // Update story status on backend\n    updateStoryMutation.mutate({\n      storyId: draggableId,\n      updates: { status: destination.droppableId },\n    });\n  };\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getStoryNumber = (story: StoryWithAssignee) => {\n    // Use the story number from database or fallback to generated one\n    return story.storyNumber || `${story.project || \"T&D\"}-0000`;\n  };\n\n  // Filter and sort stories for list view\n  const getFilteredAndSortedStories = () => {\n    if (!stories) return [];\n\n    let filtered = stories.filter(story => {\n      const matchesProject = selectedProject === \"all\" || story.project === selectedProject;\n      const matchesTeamLead = selectedTeamLead === \"all\" || story.teamLead === selectedTeamLead;\n      const matchesStory = filters.story === \"\" || getStoryNumber(story).toLowerCase().includes(filters.story.toLowerCase());\n      const matchesTitle = filters.title === \"\" || story.title.toLowerCase().includes(filters.title.toLowerCase());\n      const matchesAssignee = filters.assignee === \"\" || (story.assignee?.name.toLowerCase().includes(filters.assignee.toLowerCase()) ?? false);\n      const matchesStatus = filters.status === \"all\" || story.status === filters.status;\n      const matchesPriority = filters.priority === \"all\" || story.priority === filters.priority;\n      const matchesPoints = filters.points === \"\" || story.pointer?.toString() === filters.points;\n      const matchesType = filters.type === \"all\" || story.storyType === filters.type;\n\n      return matchesProject && matchesTeamLead && matchesStory && matchesTitle && matchesAssignee && matchesStatus && matchesPriority && matchesPoints && matchesType;\n    });\n\n    if (sortColumn) {\n      filtered.sort((a, b) => {\n        let aVal: any, bVal: any;\n\n        switch (sortColumn) {\n          case \"story\":\n            aVal = getStoryNumber(a);\n            bVal = getStoryNumber(b);\n            break;\n          case \"title\":\n            aVal = a.title;\n            bVal = b.title;\n            break;\n          case \"assignee\":\n            aVal = a.assignee?.name || \"\";\n            bVal = b.assignee?.name || \"\";\n            break;\n          case \"status\":\n            aVal = a.status;\n            bVal = b.status;\n            break;\n          case \"priority\":\n            const priorityOrder = { \"Low\": 0, \"Medium\": 1, \"High\": 2 };\n            aVal = priorityOrder[a.priority as keyof typeof priorityOrder];\n            bVal = priorityOrder[b.priority as keyof typeof priorityOrder];\n            break;\n          case \"points\":\n            aVal = a.pointer || 0;\n            bVal = b.pointer || 0;\n            break;\n          case \"type\":\n            aVal = a.storyType;\n            bVal = b.storyType;\n            break;\n          default:\n            return 0;\n        }\n\n        if (aVal < bVal) return sortDirection === \"asc\" ? -1 : 1;\n        if (aVal > bVal) return sortDirection === \"asc\" ? 1 : -1;\n        return 0;\n      });\n    }\n\n    return filtered;\n  };\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(column);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const canManageBoard = user?.role === \"Admin\" || user?.role === \"Team Lead\";\n\n  const handleCreateNewTask = (columnStatus: string) => {\n    createStoryMutation.mutate(columnStatus);\n  };\n\n  const StoryCard = ({ story, index }: { story: StoryWithAssignee; index: number }) => {\n    const getCardScale = () => {\n      switch (viewDensity) {\n        case \"compact\": return \"scale-90\";\n        case \"comfortable\": return \"scale-110\";\n        default: return \"scale-100\";\n      }\n    };\n\n    return (\n      <Draggable draggableId={story.id} index={index}>\n        {(provided, snapshot) => (\n          <Card\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            className={cn(\n              \"mb-3 transition-all duration-200 hover:shadow-md border border-border/50 transform-gpu\",\n              snapshot.isDragging && \"rotate-1 shadow-lg border-primary/50 scale-105\",\n              getCardScale(),\n              viewDensity === \"compact\" && \"mb-2\",\n              viewDensity === \"comfortable\" && \"mb-4\"\n            )}\n            data-testid={`story-card-${story.id}`}\n            style={{\n              ...provided.draggableProps.style,\n              transformOrigin: \"center\"\n            }}\n          >\n            <CardContent\n              className={cn(\n                \"hover:bg-muted/30 transition-colors cursor-pointer\",\n                viewDensity === \"compact\" && \"p-2 text-sm\",\n                viewDensity === \"comfortable\" && \"p-6 text-base\",\n                viewDensity === \"normal\" && \"p-4\"\n              )}\n              onClick={(e) => {\n                e.stopPropagation();\n                onStoryClick?.(story.id);\n              }}\n            >\n              {/* Story Number at the top */}\n              <div className=\"flex items-center justify-between mb-2\">\n                <Badge variant=\"outline\" className=\"text-xs font-mono\">\n                  <Hash className=\"w-3 h-3 mr-1\" />\n                  {getStoryNumber(story)}\n                </Badge>\n                <Badge\n                  variant=\"secondary\"\n                  className=\"text-xs px-2 py-1 flex-shrink-0\"\n                  style={{\n                    backgroundColor: `${PRIORITY_COLORS[story.priority as keyof typeof PRIORITY_COLORS]}20`,\n                    color: PRIORITY_COLORS[story.priority as keyof typeof PRIORITY_COLORS],\n                  }}\n                >\n                  {story.priority}\n                </Badge>\n              </div>\n\n              {/* Story Type */}\n              {story.storyType && (\n                <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5 mb-2\">\n                  {story.storyType}\n                </Badge>\n              )}\n\n              {/* Title */}\n              <h5 className={cn(\n                \"font-medium text-foreground leading-tight hover:text-primary transition-colors\",\n                viewDensity === \"compact\" && \"text-sm\",\n                viewDensity === \"normal\" && \"text-base\",\n                viewDensity === \"comfortable\" && \"text-lg\"\n              )}>\n                {story.title}\n              </h5>\n\n              {/* Description (only in normal/comfortable view) */}\n              {story.description && (\n                <p className={cn(\n                  \"text-muted-foreground mb-3 line-clamp-2\",\n                  viewDensity === \"compact\" && \"text-xs\",\n                  viewDensity === \"normal\" && \"text-sm\",\n                  viewDensity === \"comfortable\" && \"text-base\"\n                )}>\n                  {story.description}\n                </p>\n              )}\n\n              {/* Bottom Row - Story Points, Assignee, Attachments, Comments */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  {story.pointer && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"w-3 h-3 text-amber-500 fill-amber-500\" />\n                      <span className={cn(\"text-muted-foreground\", viewDensity === \"compact\" ? \"text-xs\" : \"text-sm\")}>{story.pointer}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-1\">\n                    <Paperclip className={cn(\"text-muted-foreground\", viewDensity === \"compact\" ? \"w-3 h-3\" : \"w-4 h-4\")} />\n                    <span className={cn(\"text-muted-foreground\", viewDensity === \"compact\" ? \"text-xs\" : \"text-sm\")}>0</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  {/* Assigned User */}\n                  {story.assignee && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Avatar className={cn(viewDensity === \"compact\" ? \"w-5 h-5\" : \"w-7 h-7\")}>\n                        <AvatarFallback className={cn(viewDensity === \"compact\" ? \"text-xs\" : \"text-sm\")}>\n                          {getUserInitials(story.assignee.name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      {(\n                        <span className={cn(\"text-muted-foreground\", viewDensity === \"compact\" ? \"text-xs\" : \"text-sm\")}>{story.assignee.name}</span>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-1\">\n                    <MessageCircle className={cn(\"text-muted-foreground\", viewDensity === \"compact\" ? \"w-3 h-3\" : \"w-4 h-4\")} />\n                    <span className={cn(\"text-muted-foreground\", viewDensity === \"compact\" ? \"text-xs\" : \"text-sm\")}>\n                      {story.commentCount || 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </Draggable>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"flex-1 p-6\">\n          <div className=\"flex space-x-6 overflow-x-auto\">\n            {COLUMN_NAMES.map((columnName) => (\n              <div key={columnName} className=\"flex-shrink-0 w-80\">\n                <div className=\"bg-muted/50 rounded-lg p-4\">\n                  <Skeleton className=\"h-6 w-32 mb-4\" />\n                  <div className=\"space-y-3\">\n                    {[...Array(2)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-32 w-full\" />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      {/* Header Section */}\n      <div className=\"border-b border-border bg-card\">\n        <div className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              {/* Project Dropdown */}\n              <Select value={selectedProject} onValueChange={(value) => {\n                setSelectedProject(value);\n                // Auto-sync team lead based on project\n                if (value === \"T&D\") {\n                  setSelectedTeamLead(\"Shantnu\");\n                } else if (value === \"ADMS\") {\n                  setSelectedTeamLead(\"Pranav\");\n                } else {\n                  setSelectedTeamLead(\"all\");\n                }\n              }}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Select Project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Projects</SelectItem>\n                  <SelectItem value=\"T&D\">T&D</SelectItem>\n                  <SelectItem value=\"ADMS\">ADMS</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Team Lead Dropdown */}\n              <Select value={selectedTeamLead} onValueChange={setSelectedTeamLead}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Select Team Lead\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Team Leads</SelectItem>\n                  {(selectedProject === \"all\" || selectedProject === \"T&D\") && (\n                    <SelectItem value=\"Shantnu\">Shantnu</SelectItem>\n                  )}\n                  {(selectedProject === \"all\" || selectedProject === \"ADMS\") && (\n                    <SelectItem value=\"Pranav\">Pranav</SelectItem>\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n\n          </div>\n        </div>\n\n        {/* Board-Level Toolbar - Available for all roles */}\n        <div className=\"border-t border-border px-4 py-2 bg-muted/30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {canManageBoard && (\n                <Button\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2\"\n                  onClick={() => handleCreateNewTask(\"To Do\")}\n                  data-testid=\"button-create-new-story\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span>+ New Story</span>\n                </Button>\n              )}\n\n              {/* View Mode Switch - Available for all roles */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setViewMode(viewMode === \"kanban\" ? \"list\" : \"kanban\")}\n              >\n                {viewMode === \"kanban\" ? <List className=\"w-4 h-4 mr-2\" /> : <Grid3x3 className=\"w-4 h-4 mr-2\" />}\n                {viewMode === \"kanban\" ? \"List View\" : \"Board View\"}\n              </Button>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n\n              {canManageBoard && (\n                <Button variant=\"outline\" size=\"sm\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Board Settings\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Board Area */}\n      <div className=\"flex-1 overflow-hidden\">\n        {viewMode === \"kanban\" ? (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <div className=\"h-full overflow-auto scrollbar-thin\">\n              <div className=\"flex space-x-6 p-6 min-w-max\">\n                {COLUMN_NAMES.map((columnName) => (\n                  <Droppable droppableId={columnName} key={columnName}>\n                    {(provided, snapshot) => (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        className={cn(\n                          \"flex-shrink-0\",\n                          \"w-80\"\n                        )}\n                      >\n                        <div className={cn(\n                          \"bg-muted/50 rounded-lg border border-border/50 h-full\",\n                          snapshot.isDraggingOver && \"bg-muted/70 border-primary/50\"\n                        )}>\n                          {/* Column Header */}\n                          <div className=\"p-4 border-b border-border/50 bg-card/50 rounded-t-lg\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div\n                                  className=\"w-3 h-3 rounded-full\"\n                                  style={{ backgroundColor: COLUMN_COLORS[columnName as keyof typeof COLUMN_COLORS] }}\n                                />\n                                <h4 className=\"font-medium text-foreground\">\n                                  {columnName}\n                                </h4>\n                                <Badge variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                                  {columns[columnName]?.length || 0}\n                                </Badge>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                {canManageBoard && (\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"w-6 h-6 p-0\">\n                                    <Settings className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                            {/* WIP Limit Indicator */}\n                            {canManageBoard && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                WIP Limit: {columns[columnName]?.length || 0}/5\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Column Content */}\n                          <div className=\"p-4 space-y-3 min-h-[500px] max-h-[calc(100vh-300px)] overflow-y-auto scrollbar-thin\">\n                            {columns[columnName]?.map((story, index) => (\n                              <StoryCard key={story.id} story={story} index={index} />\n                            ))}\n                            {provided.placeholder}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Droppable>\n                ))}\n              </div>\n            </div>\n          </DragDropContext>\n        ) : (\n          // List View\n          <div className=\"h-full overflow-auto p-6\">\n            <div className=\"bg-card rounded-lg border\">\n              {/* Filters Row */}\n              <div className=\"grid grid-cols-12 gap-4 p-4 bg-muted/20 border-b\">\n                <div className=\"col-span-1\">\n                  <Input\n                    placeholder=\"Story #...\"\n                    value={filters.story}\n                    onChange={(e) => handleFilterChange(\"story\", e.target.value)}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div className=\"col-span-3\">\n                  <Input\n                    placeholder=\"Title...\"\n                    value={filters.title}\n                    onChange={(e) => handleFilterChange(\"title\", e.target.value)}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Select value={filters.assignee} onValueChange={(value) => handleFilterChange(\"assignee\", value)}>\n                    <SelectTrigger className=\"h-8 text-xs\">\n                      <SelectValue placeholder=\"Assignee\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All</SelectItem>\n                      <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                      {users && Array.isArray(users) ? users.map((user: any) => (\n                        <SelectItem key={user.id} value={user.name}>\n                          {user.name}\n                        </SelectItem>\n                      )) : null}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"col-span-2\">\n                  <Select value={filters.status} onValueChange={(value) => handleFilterChange(\"status\", value)}>\n                    <SelectTrigger className=\"h-8 text-xs\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All</SelectItem>\n                      <SelectItem value=\"To Do\">To Do</SelectItem>\n                      <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                      <SelectItem value=\"Blocked\">Blocked</SelectItem>\n                      <SelectItem value=\"Validation\">Validation</SelectItem>\n                      <SelectItem value=\"Completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"col-span-1\">\n                  <Select value={filters.priority} onValueChange={(value) => handleFilterChange(\"priority\", value)}>\n                    <SelectTrigger className=\"h-8 text-xs\">\n                      <SelectValue placeholder=\"Priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All</SelectItem>\n                      <SelectItem value=\"Low\">Low</SelectItem>\n                      <SelectItem value=\"Medium\">Medium</SelectItem>\n                      <SelectItem value=\"High\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"col-span-1\">\n                  <Input\n                    placeholder=\"Points...\"\n                    value={filters.points}\n                    onChange={(e) => handleFilterChange(\"points\", e.target.value)}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div className=\"col-span-1\">\n                  <Select value={filters.type} onValueChange={(value) => handleFilterChange(\"type\", value)}>\n                    <SelectTrigger className=\"h-8 text-xs\">\n                      <SelectValue placeholder=\"Type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All</SelectItem>\n                      <SelectItem value=\"Story\">Story</SelectItem>\n                      <SelectItem value=\"Bug\">Bug</SelectItem>\n                      <SelectItem value=\"Epic\">Epic</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"col-span-1\">\n                  <div className=\"h-8\"></div> {/* Actions column - no filter */}\n                </div>\n              </div>\n\n              {/* Table Header with Sorting */}\n              <div className=\"grid grid-cols-12 gap-4 p-4 bg-muted/50 border-b text-sm font-medium text-muted-foreground\">\n                <div className=\"col-span-1 flex items-center cursor-pointer\" onClick={() => handleSort(\"story\")}>\n                  Story #\n                  {sortColumn === \"story\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-3 flex items-center cursor-pointer\" onClick={() => handleSort(\"title\")}>\n                  Title\n                  {sortColumn === \"title\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-2 flex items-center cursor-pointer\" onClick={() => handleSort(\"assignee\")}>\n                  Assignee\n                  {sortColumn === \"assignee\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-2 flex items-center cursor-pointer\" onClick={() => handleSort(\"status\")}>\n                  Status\n                  {sortColumn === \"status\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-1 flex items-center cursor-pointer\" onClick={() => handleSort(\"priority\")}>\n                  Priority\n                  {sortColumn === \"priority\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-1 flex items-center cursor-pointer\" onClick={() => handleSort(\"points\")}>\n                  Points\n                  {sortColumn === \"points\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-1 flex items-center cursor-pointer\" onClick={() => handleSort(\"type\")}>\n                  Type\n                  {sortColumn === \"type\" && (\n                    sortDirection === \"asc\" ? <SortAsc className=\"w-3 h-3 ml-1\" /> : <SortDesc className=\"w-3 h-3 ml-1\" />\n                  )}\n                </div>\n                <div className=\"col-span-1\">Actions</div>\n              </div>\n\n              {/* Table Body */}\n              <div className=\"divide-y divide-border\">\n                {getFilteredAndSortedStories().length === 0 ? (\n                  <div className=\"p-8 text-center text-muted-foreground\">\n                    <Search className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>No stories found matching your filters</p>\n                  </div>\n                ) : (\n                  getFilteredAndSortedStories().map((story) => (\n                    <div\n                      key={story.id}\n                      className=\"grid grid-cols-12 gap-4 p-4 hover:bg-muted/50 cursor-pointer transition-colors\"\n                      onClick={() => onStoryClick?.(story.id)}\n                    >\n                      <div className=\"col-span-1\">\n                        <Badge variant=\"outline\" className=\"text-xs font-mono\">\n                          <Hash className=\"w-3 h-3 mr-1\" />\n                          {getStoryNumber(story)}\n                        </Badge>\n                      </div>\n                      <div className=\"col-span-3\">\n                        <div className=\"font-medium text-sm\">{story.title}</div>\n                        {story.description && (\n                          <div className=\"text-xs text-muted-foreground mt-1 line-clamp-1\">\n                            {story.description}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"col-span-2\">\n                        {story.assignee ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"w-6 h-6\">\n                              <AvatarFallback className=\"text-xs\">\n                                {getUserInitials(story.assignee.name)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"text-sm\">{story.assignee.name}</span>\n                          </div>\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground\">Unassigned</span>\n                        )}\n                      </div>\n                      <div className=\"col-span-2\">\n                        <Badge\n                          variant=\"outline\"\n                          className=\"text-xs\"\n                          style={{\n                            backgroundColor: `${COLUMN_COLORS[story.status as keyof typeof COLUMN_COLORS]}20`,\n                            borderColor: COLUMN_COLORS[story.status as keyof typeof COLUMN_COLORS],\n                            color: COLUMN_COLORS[story.status as keyof typeof COLUMN_COLORS],\n                          }}\n                        >\n                          {story.status}\n                        </Badge>\n                      </div>\n                      <div className=\"col-span-1\">\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"text-xs\"\n                          style={{\n                            backgroundColor: `${PRIORITY_COLORS[story.priority as keyof typeof PRIORITY_COLORS]}20`,\n                            color: PRIORITY_COLORS[story.priority as keyof typeof PRIORITY_COLORS],\n                          }}\n                        >\n                          {story.priority}\n                        </Badge>\n                      </div>\n                      <div className=\"col-span-1\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-3 h-3 text-amber-500 fill-amber-500\" />\n                          <span className=\"text-sm\">{story.pointer}</span>\n                        </div>\n                      </div>\n                      <div className=\"col-span-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {story.storyType}\n                        </Badge>\n                      </div>\n                      <div className=\"col-span-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"flex items-center space-x-1\">\n                            <MessageCircle className=\"w-3 h-3 text-muted-foreground\" />\n                            <span className=\"text-xs\">{story.commentCount || 0}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Paperclip className=\"w-3 h-3 text-muted-foreground\" />\n                            <span className=\"text-xs\">0</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Compact Footer */}\n      <div className=\"border-t border-border bg-card p-2\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Total: {stories?.length || 0}</span>\n            <span>Done: {columns[\"Completed\"]?.length || 0}</span>\n            <span>Active: {columns[\"In Progress\"]?.length || 0}</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Activity className=\"w-3 h-3\" />\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":35361},"client/src/components/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useTheme } from \"@/lib/theme-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  BarChart3, \n  Columns, \n  ClipboardList, \n  Users, \n  Bell, \n  Settings, \n  LogOut, \n  Moon, \n  Sun,\n  ChevronDown,\n  LayoutDashboard,\n  Clock\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  currentView: string;\n  onViewChange: (view: \"dashboard\" | \"kanban\" | \"stories\" | \"active-sprint\") => void;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport function Sidebar({ currentView, onViewChange, isOpen, onToggle }: SidebarProps) {\n  const { user, logoutMutation } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const navigationItems = [\n    {\n      id: \"dashboard\",\n      label: \"Dashboard\",\n      icon: BarChart3,\n      action: () => onViewChange(\"dashboard\"),\n    },\n    {\n      id: \"kanban\",\n      label: \"Kanban Board\",\n      icon: Columns,\n      action: () => onViewChange(\"kanban\"),\n    },\n    {\n      id: \"active-sprint\",\n      label: \"Active Sprint\",\n      icon: Clock,\n      action: () => onViewChange(\"active-sprint\"),\n    },\n    {\n      id: \"stories\",\n      label: \"Stories\",\n      icon: ClipboardList,\n      action: () => onViewChange(\"stories\"),\n    },\n  ];\n\n  if (!user) return null;\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n          onClick={onToggle}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed md:relative z-50 md:z-auto\",\n          \"bg-card border-r border-border w-64 flex-shrink-0 flex flex-col h-full\",\n          \"transition-transform duration-300 ease-in-out\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\",\n          !isOpen && \"md:w-0 md:overflow-hidden\"\n        )}\n      >\n        {/* Sidebar Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <LayoutDashboard className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"font-semibold text-sm text-foreground\">Project Manager</h1>\n              <p className=\"text-xs text-muted-foreground\">v1.0.0</p>\n            </div>\n          </div>\n        </div>\n\n        {/* User Info */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarFallback className=\"bg-accent text-accent-foreground text-sm\">\n                {getUserInitials(user.name)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-username\">\n                {user.name}\n              </p>\n              <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n                {user.role}\n              </p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" className=\"w-6 h-6 p-0\">\n              <ChevronDown className=\"w-3 h-3 text-muted-foreground\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 p-4 space-y-2\">\n          {navigationItems.map((item) => (\n            <Button\n              key={item.id}\n              variant={currentView === item.id ? \"secondary\" : \"ghost\"}\n              className=\"w-full justify-start\"\n              onClick={item.action}\n              data-testid={`button-nav-${item.id}`}\n            >\n              <item.icon className=\"w-4 h-4 mr-3\" />\n              {item.label}\n            </Button>\n          ))}\n\n          {/* Role-based navigation */}\n          {(user.role === \"Admin\" || user.role === \"Team Lead\") && (\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start\"\n              data-testid=\"button-nav-team\"\n            >\n              <Users className=\"w-4 h-4 mr-3\" />\n              Team Management\n            </Button>\n          )}\n\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start\"\n            data-testid=\"button-nav-notifications\"\n          >\n            <Bell className=\"w-4 h-4 mr-3\" />\n            Notifications\n            <span className=\"ml-auto bg-destructive text-destructive-foreground text-xs px-2 py-0.5 rounded-full\">\n              3\n            </span>\n          </Button>\n        </nav>\n\n        {/* Sidebar Footer */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              data-testid=\"button-toggle-theme\"\n            >\n              {theme === \"dark\" ? (\n                <Sun className=\"w-4 h-4\" />\n              ) : (\n                <Moon className=\"w-4 h-4\" />\n              )}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              data-testid=\"button-settings\"\n            >\n              <Settings className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":5954},"client/src/components/story-edit-modal.tsx":{"content":"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Save, \n  X, \n  User, \n  Calendar, \n  Star, \n  Flag, \n  MessageCircle,\n  Paperclip,\n  Activity,\n  Hash,\n  CheckSquare,\n  Link,\n  FileText,\n  History,\n  ChevronRight,\n  ChevronDown,\n  Clock\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { StoryWithAssignee } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StoryEditModalProps {\n  storyId: string;\n  open: boolean;\n  onClose: () => void;\n}\n\nconst PRIORITY_OPTIONS = [\"Low\", \"Medium\", \"High\"];\nconst STATUS_OPTIONS = [\"To Do\", \"In Progress\", \"Blocked\", \"Validation\", \"Completed\"];\nconst STORY_TYPE_OPTIONS = [\"Story\", \"Bug\", \"Epic\"];\nconst STORY_POINTS = [1, 2, 3, 4, 5];\n\nexport function StoryEditModal({ storyId, open, onClose }: StoryEditModalProps) {\n  const [formData, setFormData] = useState<Partial<StoryWithAssignee>>({});\n  const [showHistory, setShowHistory] = useState(false);\n  const [newComment, setNewComment] = useState(\"\");\n  const [subtasks, setSubtasks] = useState<Array<{ id: string; text: string; completed: boolean }>>([]);\n  \n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  const { data: story, isLoading } = useQuery<StoryWithAssignee>({\n    queryKey: [`/api/stories/${storyId}`],\n    enabled: open && !!storyId,\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: open,\n  });\n\n  const { data: comments } = useQuery({\n    queryKey: [`/api/stories/${storyId}/comments`],\n    enabled: open && !!storyId,\n  });\n\n  const updateStoryMutation = useMutation({\n    mutationFn: async (updates: Partial<StoryWithAssignee>) => {\n      const res = await apiRequest(\"PATCH\", `/api/stories/${storyId}`, updates);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/stories/${storyId}`] });\n      onClose();\n    },\n  });\n\n  const addCommentMutation = useMutation({\n    mutationFn: async (comment: string) => {\n      const res = await apiRequest(\"POST\", `/api/stories/${storyId}/comments`, {\n        commentText: comment,\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/stories/${storyId}/comments`] });\n      setNewComment(\"\");\n    },\n  });\n\n  useEffect(() => {\n    if (story) {\n      setFormData(story);\n      // Initialize subtasks from acceptance criteria if formatted as bullet points\n      if (story.acceptanceCriteria) {\n        const tasks = story.acceptanceCriteria\n          .split('\\n')\n          .filter(line => line.trim().startsWith('•') || line.trim().startsWith('-'))\n          .map((line, index) => ({\n            id: `task-${index}`,\n            text: line.trim().replace(/^[•-]\\s*/, ''),\n            completed: false\n          }));\n        setSubtasks(tasks);\n      }\n    }\n  }, [story]);\n\n  const handleSave = () => {\n    updateStoryMutation.mutate(formData);\n  };\n\n  const handleAddSubtask = () => {\n    setSubtasks([...subtasks, { id: `task-${Date.now()}`, text: '', completed: false }]);\n  };\n\n  const updateSubtask = (id: string, updates: Partial<typeof subtasks[0]>) => {\n    setSubtasks(subtasks.map(task => task.id === id ? { ...task, ...updates } : task));\n  };\n\n  const removeSubtask = (id: string) => {\n    setSubtasks(subtasks.filter(task => task.id !== id));\n  };\n\n  const getUserInitials = (name: string) => {\n    return name?.split(\" \").map(n => n[0]).join(\"\").toUpperCase().slice(0, 2) || \"U\";\n  };\n\n  const getStoryNumber = (story: StoryWithAssignee) => {\n    return story.storyNumber || `${story.project || \"T&D\"}-0000`;\n  };\n\n  if (!story || isLoading) {\n    return null;\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl h-[90vh] p-0\">\n        <div className=\"flex h-full\">\n          {/* Main Content */}\n          <div className=\"flex-1 flex flex-col\">\n            <DialogHeader className=\"p-6 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Badge variant=\"outline\" className=\"font-mono\">\n                    <Hash className=\"w-3 h-3 mr-1\" />\n                    {getStoryNumber(story)}\n                  </Badge>\n                  <DialogTitle className=\"text-xl\">{formData.title}</DialogTitle>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => setShowHistory(!showHistory)}>\n                    <History className=\"w-4 h-4 mr-2\" />\n                    History\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </DialogHeader>\n\n            <div className=\"flex-1 overflow-hidden\">\n              <div className=\"grid grid-cols-3 h-full\">\n                {/* Left Column - Main Details */}\n                <div className=\"col-span-2 p-6 overflow-y-auto\">\n                  <div className=\"space-y-6\">\n                    {/* Title */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Title</label>\n                      <Input\n                        value={formData.title || \"\"}\n                        onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                        className=\"text-lg font-medium\"\n                      />\n                    </div>\n\n                    {/* Description with Bullet Points */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Description</label>\n                      <Textarea\n                        value={formData.description || \"\"}\n                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                        placeholder=\"• Add bullet points here&#10;• Use bullet points for better formatting&#10;• Keep descriptions clear and concise\"\n                        rows={5}\n                        className=\"font-mono\"\n                      />\n                    </div>\n\n                    {/* Acceptance Criteria - Single Text Box with Bullet Support */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Acceptance Criteria</label>\n                      <Textarea\n                        value={formData.acceptanceCriteria || \"\"}\n                        onChange={(e) => setFormData({ ...formData, acceptanceCriteria: e.target.value })}\n                        placeholder=\"• Add acceptance criteria here&#10;• Use bullet points for better formatting&#10;• Each line can be a new criteria&#10;• Press Enter for new lines\"\n                        rows={8}\n                        className=\"font-mono resize-none\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Use • or - for bullet points. Press Enter for new lines. No separate \"Add Criteria\" button needed.\n                      </p>\n                    </div>\n\n                    {/* Comments Section */}\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-3 flex items-center\">\n                        <MessageCircle className=\"w-4 h-4 mr-2\" />\n                        Comments & Activity\n                      </h3>\n                      <div className=\"space-y-4\">\n                        {/* Add Comment */}\n                        <div className=\"flex space-x-3\">\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarFallback className=\"text-xs\">\n                              {getUserInitials(user?.name || \"User\")}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <Textarea\n                              value={newComment}\n                              onChange={(e) => setNewComment(e.target.value)}\n                              placeholder=\"Add a comment... Use @mention to notify team members\"\n                              rows={3}\n                            />\n                            <Button \n                              size=\"sm\" \n                              onClick={() => addCommentMutation.mutate(newComment)}\n                              disabled={!newComment.trim()}\n                            >\n                              Comment\n                            </Button>\n                          </div>\n                        </div>\n\n                        {/* Comments List */}\n                        {comments && Array.isArray(comments) && comments.length > 0 ? (\n                          comments.map((comment: any) => (\n                            <div key={comment.id} className=\"flex space-x-3 bg-muted/30 rounded-lg p-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarFallback className=\"text-xs\">\n                                  {getUserInitials(comment.user?.name || \"Unknown\")}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2 mb-1\">\n                                  <span className=\"text-sm font-medium\">{comment.user?.name || \"Unknown User\"}</span>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {comment.createdAt ? new Date(comment.createdAt).toLocaleString(\"en-US\", {\n                                      year: 'numeric',\n                                      month: 'short',\n                                      day: 'numeric',\n                                      hour: '2-digit',\n                                      minute: '2-digit',\n                                      second: '2-digit'\n                                    }) : \"Just now\"}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-foreground whitespace-pre-wrap\">{comment.commentText}</p>\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-center text-muted-foreground py-4\">\n                            <MessageCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                            <p className=\"text-sm\">No comments yet</p>\n                            <p className=\"text-xs\">Be the first to comment on this story</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Attachments Section */}\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-3 flex items-center\">\n                        <Paperclip className=\"w-4 h-4 mr-2\" />\n                        Attachments & Links\n                      </h3>\n                      <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <FileText className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                        <p className=\"text-sm text-muted-foreground\">\n                          Drag files here or click to upload\n                        </p>\n                        <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                          <Link className=\"w-4 h-4 mr-2\" />\n                          Add Link\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Right Column - Properties */}\n                <div className=\"border-l border-border p-4 overflow-y-auto bg-muted/30\">\n                  <div className=\"space-y-4\">\n                    {/* Story Type */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Story Type</label>\n                      <Select\n                        value={formData.storyType || \"Story\"}\n                        onValueChange={(value) => setFormData({ ...formData, storyType: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {STORY_TYPE_OPTIONS.map((type) => (\n                            <SelectItem key={type} value={type}>{type}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Priority */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Priority</label>\n                      <Select\n                        value={formData.priority || \"Medium\"}\n                        onValueChange={(value) => setFormData({ ...formData, priority: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {PRIORITY_OPTIONS.map((priority) => (\n                            <SelectItem key={priority} value={priority}>\n                              <div className=\"flex items-center space-x-2\">\n                                <Flag className=\"w-4 h-4\" />\n                                <span>{priority}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Story Points */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Story Points</label>\n                      <Select\n                        value={formData.pointer?.toString() || \"1\"}\n                        onValueChange={(value) => setFormData({ ...formData, pointer: parseInt(value) })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {STORY_POINTS.map((point) => (\n                            <SelectItem key={point} value={point.toString()}>\n                              <div className=\"flex items-center space-x-2\">\n                                <Star className=\"w-4 h-4\" />\n                                <span>{point}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Status */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Status</label>\n                      <Select\n                        value={formData.status || \"To Do\"}\n                        onValueChange={(value) => setFormData({ ...formData, status: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {STATUS_OPTIONS.map((status) => (\n                            <SelectItem key={status} value={status}>{status}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Assignee */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Assignee</label>\n                      <Select\n                        value={formData.assigneeId || \"unassigned\"}\n                        onValueChange={(value) => setFormData({ \n                          ...formData, \n                          assigneeId: value === \"unassigned\" ? null : value \n                        })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                          {users && Array.isArray(users) ? users.map((user: any) => (\n                            <SelectItem key={user.id} value={user.id}>\n                              <div className=\"flex items-center space-x-2\">\n                                <User className=\"w-4 h-4\" />\n                                <span>{user.name}</span>\n                              </div>\n                            </SelectItem>\n                          )) : null}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Epic Link */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Epic Link</label>\n                      <Input\n                        value={formData.epicLink || \"\"}\n                        onChange={(e) => setFormData({ ...formData, epicLink: e.target.value })}\n                        placeholder=\"Link to epic...\"\n                      />\n                    </div>\n\n                    {/* Active Sprint */}\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Active Sprint</label>\n                      <Select\n                        value={formData.activeSprint || \"sprint-1\"}\n                        onValueChange={(value) => setFormData({ ...formData, activeSprint: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"sprint-1\">Sprint 1</SelectItem>\n                          <SelectItem value=\"sprint-2\">Sprint 2</SelectItem>\n                          <SelectItem value=\"sprint-3\">Sprint 3</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <Separator />\n\n                    {/* Action Buttons */}\n                    <div className=\"space-y-2\">\n                      <Button onClick={handleSave} className=\"w-full\">\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Changes\n                      </Button>\n                      <Button variant=\"outline\" onClick={onClose} className=\"w-full\">\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Activity History Panel (Collapsible) */}\n          {showHistory && (\n            <div className=\"w-80 border-l border-border bg-muted/20\">\n              <div className=\"p-4 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium flex items-center\">\n                    <Activity className=\"w-4 h-4 mr-2\" />\n                    Activity History\n                  </h3>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={() => setShowHistory(false)}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n              <ScrollArea className=\"h-[calc(100vh-200px)]\">\n                <div className=\"p-4 space-y-4\">\n                  {/* Sample Activity Items */}\n                  <div className=\"flex space-x-3\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Abhishek</span> changed status from \n                        <Badge variant=\"outline\" className=\"mx-1 text-xs\">To Do</Badge> to \n                        <Badge variant=\"outline\" className=\"mx-1 text-xs\">In Progress</Badge>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground flex items-center mt-1\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {new Date(Date.now() - 2 * 60 * 60 * 1000).toLocaleString(\"en-US\", {\n                          year: 'numeric',\n                          month: 'short',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          second: '2-digit'\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Shantnu</span> assigned to \n                        <span className=\"font-medium mx-1\">Tanay</span>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground flex items-center mt-1\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleString(\"en-US\", {\n                          year: 'numeric',\n                          month: 'short',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          second: '2-digit'\n                        })}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Abhishek</span> created this story\n                      </div>\n                      <div className=\"text-xs text-muted-foreground flex items-center mt-1\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toLocaleString(\"en-US\", {\n                          year: 'numeric',\n                          month: 'short',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          second: '2-digit'\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </ScrollArea>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":24184},"client/src/components/story-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertStorySchema, type User, type StoryWithAssignee } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Loader2, \n  Brain, \n  X, \n  Plus, \n  Minus,\n  BookOpen,\n  Bug,\n  Zap,\n  ArrowUp,\n  ArrowDown,\n  Flag\n} from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst storyFormSchema = insertStorySchema.omit({\n  createdBy: true,\n  updatedBy: true,\n}).extend({\n  title: z.string().min(1, \"Title is required\"),\n  priority: z.enum([\"Low\", \"Medium\", \"High\"], {\n    required_error: \"Priority is required\",\n  }),\n  storyType: z.enum([\"Story\", \"Bug\", \"Epic\"], {\n    required_error: \"Story type is required\",\n  }),\n  dueDate: z.string().optional().refine((date) => {\n    if (!date) return true; // Optional field\n    const selectedDate = new Date(date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    selectedDate.setHours(0, 0, 0, 0);\n    return selectedDate >= today;\n  }, \"Due date cannot be in the past\"),\n});\n\ntype StoryFormData = z.infer<typeof storyFormSchema>;\n\ninterface StoryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface AIEstimation {\n  estimatedPointer: number;\n  prioritySuggestion: string;\n  confidence: number;\n  reasoning: string;\n}\n\nexport function StoryModal({ isOpen, onClose }: StoryModalProps) {\n  const [isGettingAIEstimate, setIsGettingAIEstimate] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<StoryFormData>({\n    resolver: zodResolver(storyFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      pointer: 1,\n      acceptanceCriteria: \"\",\n      status: \"To Do\",\n      priority: \"Medium\",\n      storyType: \"Story\",\n      sprintId: \"sprint-1\",\n      tags: [],\n      dueDate: undefined,\n      assigneeId: undefined,\n    },\n  });\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: user?.role === \"Admin\",\n  });\n\n  const createStoryMutation = useMutation({\n    mutationFn: async (data: StoryFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/stories\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Story created successfully\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create story\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getAIEstimateMutation = useMutation({\n    mutationFn: async (data: { title: string; description: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/stories/ai-estimate\", data);\n      return await res.json() as AIEstimation;\n    },\n    onSuccess: (estimation: AIEstimation) => {\n      form.setValue(\"pointer\", estimation.estimatedPointer);\n      form.setValue(\"priority\", estimation.prioritySuggestion as \"Low\" | \"Medium\" | \"High\");\n      toast({\n        title: \"AI Estimation Complete\",\n        description: estimation.reasoning,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"AI Estimation Failed\",\n        description: \"Could not get AI estimation. Please set values manually.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetAIEstimate = async () => {\n    const title = form.getValues(\"title\");\n    const description = form.getValues(\"description\") || \"\";\n\n    if (!title.trim()) {\n      toast({\n        title: \"Title Required\",\n        description: \"Please enter a story title before getting AI estimation\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGettingAIEstimate(true);\n    try {\n      await getAIEstimateMutation.mutateAsync({ title, description });\n    } finally {\n      setIsGettingAIEstimate(false);\n    }\n  };\n\n  const onSubmit = (data: StoryFormData) => {\n    // Process tags and dueDate\n    const processedData = {\n      ...data,\n      tags: typeof data.tags === \"string\" \n        ? (data.tags as string).split(\",\").map((tag: string) => tag.trim()).filter(Boolean)\n        : data.tags || [],\n      dueDate: data.dueDate || undefined,  // Keep as string, backend will handle Date conversion\n    };\n\n    createStoryMutation.mutate(processedData);\n  };\n\n  const handleClose = () => {\n    if (!createStoryMutation.isPending) {\n      form.reset();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>Create New Story</DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              disabled={createStoryMutation.isPending}\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              data-testid=\"input-story-title\"\n              {...form.register(\"title\")}\n              placeholder=\"Enter story title\"\n              disabled={createStoryMutation.isPending}\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.title.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              data-testid=\"textarea-story-description\"\n              {...form.register(\"description\")}\n              placeholder=\"Describe the story requirements...\"\n              rows={4}\n              disabled={createStoryMutation.isPending}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority *</Label>\n              <Select\n                value={form.watch(\"priority\")}\n                onValueChange={(value) => form.setValue(\"priority\", value as \"Low\" | \"Medium\" | \"High\")}\n                disabled={createStoryMutation.isPending}\n              >\n                <SelectTrigger data-testid=\"select-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Low\">Low <ArrowDown className=\"w-4 h-4 inline-block ml-2 text-green-500\"/></SelectItem>\n                  <SelectItem value=\"Medium\">Medium <Zap className=\"w-4 h-4 inline-block ml-2 text-yellow-500\"/></SelectItem>\n                  <SelectItem value=\"High\">High <ArrowUp className=\"w-4 h-4 inline-block ml-2 text-red-500\"/></SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.priority && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.priority.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"pointer\">Story Points</Label>\n              <Input\n                id=\"pointer\"\n                data-testid=\"input-story-points\"\n                type=\"number\"\n                min=\"1\"\n                max=\"5\"\n                {...form.register(\"pointer\", { valueAsNumber: true })}\n                placeholder=\"1-5\"\n                disabled={createStoryMutation.isPending}\n              />\n               {form.formState.errors.pointer && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.pointer.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"acceptanceCriteria\">Acceptance Criteria</Label>\n            <Textarea\n              id=\"acceptanceCriteria\"\n              data-testid=\"textarea-acceptance-criteria\"\n              {...form.register(\"acceptanceCriteria\")}\n              placeholder=\"- User can login with email and password&#10;- JWT token is generated and stored&#10;- User is redirected to dashboard\"\n              rows={3}\n              disabled={createStoryMutation.isPending}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            {user?.role === \"Admin\" && users && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"assigneeId\">Assignee</Label>\n                <Select\n                  value={form.watch(\"assigneeId\") || \"unassigned\"}\n                  onValueChange={(value) => form.setValue(\"assigneeId\", value === \"unassigned\" ? undefined : value)}\n                  disabled={createStoryMutation.isPending}\n                >\n                  <SelectTrigger data-testid=\"select-assignee\">\n                    <SelectValue placeholder=\"Unassigned\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                    {users.map((user) => (\n                      <SelectItem key={user.id} value={user.id}>\n                        {user.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dueDate\">Due Date</Label>\n              <Input\n                id=\"dueDate\"\n                data-testid=\"input-due-date\"\n                type=\"date\"\n                min={new Date().toISOString().split('T')[0]}\n                {...form.register(\"dueDate\")}\n                disabled={createStoryMutation.isPending}\n              />\n              {form.formState.errors.dueDate && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.dueDate.message}\n                </p>\n              )}\n            </div>\n          </div>\n          \n          {/* Epic Link */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"epicLink\">Epic Link</Label>\n            <Input\n              id=\"epicLink\"\n              data-testid=\"input-epic-link\"\n              {...form.register(\"epicLink\")}\n              placeholder=\"Select or create an Epic Link\"\n              disabled={createStoryMutation.isPending}\n            />\n            {/* Add tag suggestion logic here if needed */}\n          </div>\n\n          {/* Story Type */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"storyType\">Story Type *</Label>\n            <Select\n              value={form.watch(\"storyType\")}\n              onValueChange={(value) => form.setValue(\"storyType\", value as \"Story\" | \"Bug\" | \"Epic\")}\n              disabled={createStoryMutation.isPending}\n            >\n              <SelectTrigger data-testid=\"select-story-type\">\n                <SelectValue placeholder=\"Select Story Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Story\">Story <BookOpen className=\"w-4 h-4 inline-block ml-2\"/></SelectItem>\n                <SelectItem value=\"Bug\">Bug <Bug className=\"w-4 h-4 inline-block ml-2\"/></SelectItem>\n                <SelectItem value=\"Epic\">Epic <Flag className=\"w-4 h-4 inline-block ml-2\"/></SelectItem>\n              </SelectContent>\n            </Select>\n            {form.formState.errors.storyType && (\n              <p className=\"text-sm text-destructive\">\n                {form.formState.errors.storyType.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleGetAIEstimate}\n              disabled={createStoryMutation.isPending || isGettingAIEstimate}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-ai-estimate\"\n            >\n              {isGettingAIEstimate ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <Brain className=\"w-4 h-4\" />\n              )}\n              <span>Get AI Estimate</span>\n            </Button>\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={createStoryMutation.isPending}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createStoryMutation.isPending}\n                data-testid=\"button-create-story\"\n              >\n                {createStoryMutation.isPending && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                Create Story\n              </Button>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14052},"client/src/components/theme-provider.tsx":{"content":"import { ThemeContextProvider } from \"@/lib/theme-context\";\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  return <ThemeContextProvider>{children}</ThemeContextProvider>;\n}\n","size_bytes":258},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/theme-context.tsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(\n  undefined\n);\n\nexport function ThemeContextProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n} & React.ComponentProps<\"div\">) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (typeof window !== 'undefined' && localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      if (typeof window !== 'undefined') {\n        localStorage.setItem(storageKey, theme);\n      }\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n      if (typeof window !== 'undefined') {\n        localStorage.setItem(storageKey, newTheme);\n      }\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1924},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Loader2, Shield, Users, BarChart3 } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, navigate] = useLocation();\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      name: \"\",\n      role: \"User\",\n    },\n  });\n\n  // Redirect if already authenticated - use useEffect to avoid setState during render\n  useEffect(() => {\n    if (user) {\n      navigate(\"/\");\n    }\n  }, [user, navigate]);\n\n  const onLogin = async (data: LoginData) => {\n    try {\n      await loginMutation.mutateAsync(data);\n      navigate(\"/\");\n    } catch (error) {\n      // Error handled by mutation\n    }\n  };\n\n  const onRegister = async (data: RegisterData) => {\n    try {\n      const { confirmPassword, ...registerData } = data;\n      await registerMutation.mutateAsync(registerData);\n      navigate(\"/\");\n    } catch (error) {\n      // Error handled by mutation\n    }\n  };\n\n  // Don't render the auth form if user is already logged in\n  if (user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Auth forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Project Manager</h1>\n            <p className=\"text-muted-foreground\">Manage your projects with ease</p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Welcome back</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        data-testid=\"input-username\"\n                        {...loginForm.register(\"username\")}\n                        placeholder=\"Enter your username\"\n                        disabled={loginMutation.isPending}\n                      />\n                      {loginForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">\n                          {loginForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        data-testid=\"input-password\"\n                        type=\"password\"\n                        {...loginForm.register(\"password\")}\n                        placeholder=\"Enter your password\"\n                        disabled={loginMutation.isPending}\n                      />\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                      Sign In\n                    </Button>\n                  </form>\n\n                  <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Demo accounts:</p>\n                    <div className=\"space-y-1 text-xs\">\n                      <p><strong>Admin:</strong> admin / admin123</p>\n                      <p><strong>Team Lead:</strong> teamlead / admin123</p>\n                      <p><strong>User:</strong> user / admin123</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create account</CardTitle>\n                  <CardDescription>\n                    Fill in your details to create a new account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-name\">Full Name</Label>\n                      <Input\n                        id=\"register-name\"\n                        data-testid=\"input-name\"\n                        {...registerForm.register(\"name\")}\n                        placeholder=\"Enter your full name\"\n                        disabled={registerMutation.isPending}\n                      />\n                      {registerForm.formState.errors.name && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.name.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        data-testid=\"input-register-username\"\n                        {...registerForm.register(\"username\")}\n                        placeholder=\"Choose a username\"\n                        disabled={registerMutation.isPending}\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\">Email</Label>\n                      <Input\n                        id=\"register-email\"\n                        data-testid=\"input-email\"\n                        type=\"email\"\n                        {...registerForm.register(\"email\")}\n                        placeholder=\"Enter your email\"\n                        disabled={registerMutation.isPending}\n                      />\n                      {registerForm.formState.errors.email && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        data-testid=\"input-register-password\"\n                        type=\"password\"\n                        {...registerForm.register(\"password\")}\n                        placeholder=\"Create a password\"\n                        disabled={registerMutation.isPending}\n                      />\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                      <Input\n                        id=\"register-confirm-password\"\n                        data-testid=\"input-confirm-password\"\n                        type=\"password\"\n                        {...registerForm.register(\"confirmPassword\")}\n                        placeholder=\"Confirm your password\"\n                        disabled={registerMutation.isPending}\n                      />\n                      {registerForm.formState.errors.confirmPassword && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.confirmPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                      Create Account\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero section */}\n      <div className=\"hidden lg:flex lg:flex-1 bg-gradient-to-br from-primary/10 via-accent/5 to-secondary/10 items-center justify-center p-8\">\n        <div className=\"max-w-md text-center\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-6\">\n            Streamline Your Project Management\n          </h2>\n          <p className=\"text-muted-foreground mb-8\">\n            Organize your work with our powerful Kanban board, track progress with insightful metrics, \n            and collaborate effectively with role-based permissions.\n          </p>\n\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-foreground\">Dashboard Analytics</h3>\n                <p className=\"text-sm text-muted-foreground\">Track progress with real-time metrics</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-foreground\">Team Collaboration</h3>\n                <p className=\"text-sm text-muted-foreground\">Work together with comments and mentions</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-foreground\">Role-based Access</h3>\n                <p className=\"text-sm text-muted-foreground\">Secure permissions for different user types</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13363},"client/src/pages/home-page.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Dashboard } from \"@/components/dashboard\";\nimport { KanbanBoard } from \"@/components/kanban-board\";\nimport { ActiveSprint } from \"@/components/active-sprint\";\nimport { StoryModal } from \"@/components/story-modal\";\nimport { CommentsSidebar } from \"@/components/comments-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Menu, Search, Plus } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { StoryEditModal } from \"@/components/story-edit-modal\";\n\ntype View = \"dashboard\" | \"kanban\" | \"stories\" | \"active-sprint\";\n\nexport default function HomePage() {\n  const [currentView, setCurrentView] = useState<View>(\"dashboard\");\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [showStoryModal, setShowStoryModal] = useState(false);\n  const [showComments, setShowComments] = useState(false);\n  const [selectedStoryId, setSelectedStoryId] = useState<string | null>(null);\n  const [isStoryEditModalOpen, setIsStoryEditModalOpen] = useState(false);\n  const [editStoryId, setEditStoryId] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  const getViewTitle = () => {\n    switch (currentView) {\n      case \"dashboard\":\n        return \"Dashboard\";\n      case \"kanban\":\n        return \"Board\";\n      case \"stories\":\n        return \"Stories\";\n      case \"active-sprint\":\n        return \"Active Sprint\";\n      default:\n        return \"Dashboard\";\n    }\n  };\n\n  const openStoryComments = (storyId: string) => {\n    setSelectedStoryId(storyId);\n    setShowComments(true);\n  };\n\n  const handleStoryEdit = (storyId: string) => {\n    setEditStoryId(storyId);\n    setIsStoryEditModalOpen(true);\n    setSelectedStoryId(null); // Close comments sidebar if open\n    setShowComments(false); // Explicitly close comments sidebar\n  };\n\n  const handleCloseEdit = () => {\n    setIsStoryEditModalOpen(false);\n    setEditStoryId(null);\n  };\n\n  const handleCloseComments = () => {\n    setShowComments(false);\n    setSelectedStoryId(null);\n  };\n\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      {/* Sidebar */}\n      <Sidebar\n        currentView={currentView}\n        onViewChange={setCurrentView}\n        isOpen={sidebarOpen}\n        onToggle={() => setSidebarOpen(!sidebarOpen)}\n      />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-card border-b border-border px-6 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-toggle-sidebar\"\n            >\n              <Menu className=\"w-4 h-4\" />\n            </Button>\n            <h2 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-page-title\">\n              {getViewTitle()}\n            </h2>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Quick Actions */}\n            <Button\n              onClick={() => setShowStoryModal(true)}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-new-story\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">New Story</span>\n            </Button>\n          </div>\n        </header>\n\n        {/* Content Area */}\n        <main className=\"flex-1 overflow-hidden\">\n          {currentView === \"dashboard\" && <Dashboard />}\n          {currentView === \"kanban\" && (\n            <KanbanBoard \n              onStoryClick={handleStoryEdit}\n              onCreateStory={() => setShowStoryModal(true)}\n            />\n          )}\n          {currentView === \"stories\" && <Dashboard />}\n          {currentView === \"active-sprint\" && (\n            <ActiveSprint onStoryClick={handleStoryEdit} />\n          )}\n        </main>\n      </div>\n\n      {/* Modals and Sidebars */}\n      <StoryModal\n        isOpen={showStoryModal}\n        onClose={() => setShowStoryModal(false)}\n      />\n\n      <CommentsSidebar\n        isOpen={showComments}\n        onClose={handleCloseComments}\n        storyId={selectedStoryId}\n        onEditStory={selectedStoryId ? () => handleStoryEdit(selectedStoryId) : undefined}\n      />\n\n      {editStoryId && (\n        <StoryEditModal\n          storyId={editStoryId}\n          open={isStoryEditModalOpen}\n          onClose={handleCloseEdit}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":4680},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3424},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1655},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}